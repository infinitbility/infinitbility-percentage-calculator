{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","totalAmountHandler","event","setState","totalAmount","target","value","partialHandler","partialAmount","partialCalc","percentHandler","percent","percentCalc","state","parseFloat","this","classes","makeStyles","theme","root","margin","spacing","width","start","flexGrow","image","height","className","noValidate","autoComplete","Grid","container","item","xs","justify","key","style","alignItems","Typography","variant","align","gutterBottom","TextField","id","label","type","InputLabelProps","shrink","onChange","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e733aea7.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\nclass App extends Component {\n\n\n  constructor(props) {\n    super(props);\n    this.state = {totalAmount: null, partialAmount: null, percent: null};\n  }\n\n  totalAmountHandler = (event) => {\n    this.setState({totalAmount: event.target.value});\n  }\n\n  partialHandler = (event) => {\n    \n    this.setState({partialAmount: event.target.value});\n\n    this.partialCalc(event.target.value);\n  }\n\n  percentHandler = (event) => {\n    this.setState({percent: event.target.value});\n\n    this.percentCalc(event.target.value);\n  }\n\n  partialCalc(partialAmount){\n    let totalAmount = parseFloat(this.state.totalAmount);\n    var partialAmount = parseFloat(partialAmount);\n\n    \n    this.setState({percent: ((100 * partialAmount) / totalAmount)});\n  }\n\n  percentCalc(percent){\n    let totalAmount = parseFloat(this.state.totalAmount);\n    var percent = parseFloat(percent);\n\n    this.setState({partialAmount: ((percent / 100) * totalAmount)});\n  }\n\n  render() {\n\n    const classes = makeStyles((theme) => ({\n      root: {\n        '& .MuiTextField-root': {\n          margin: theme.spacing(1),\n          width: '25ch',\n        },\n        start: {\n          flexGrow: 1,\n        },\n        image: {\n          width: 30,\n          height: 30,\n        }\n      },\n    }));\n\n    return (\n      <form className={classes.root} noValidate autoComplete=\"off\">\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <Grid container justify=\"center\" spacing={5}>\n              <Grid key={0} style={{alignItems: \"center\", margin: 100}} item>\n                {/* <img src={logo} alt=\"Infinitbility\" style={{alignItems: \"center\", height: \"50%\", width: \"50%\"}}/> */}\n                <Typography variant=\"h5\" align={'center'} gutterBottom>Infinitbility Percentage Calculator</Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <Grid container justify=\"center\" spacing={5}>\n              <Grid key={0} item>\n                    <TextField\n                  id=\"Total-Amount\"\n                  label=\"Total Amount\"\n                  type=\"number\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  value={this.state.totalAmount}\n                  variant=\"filled\"\n                  onChange={this.totalAmountHandler.bind(this)}\n                  \n                />\n              </Grid>\n              <Grid key={1} item>\n                    <TextField\n                  id=\"Partial-Amount\"\n                  label=\"Partial Amount\"\n                  type=\"number\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  value={this.state.partialAmount}\n                  onChange={this.partialHandler.bind(this)}\n                  variant=\"filled\"\n                  \n                />\n              </Grid>\n              <Grid key={2} item>\n                    <TextField\n                  id=\"Percent\"\n                  label=\"Percent\"\n                  type=\"number\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  value={this.state.percent}\n                  onChange={this.percentHandler.bind(this)}\n\n                  variant=\"filled\"\n                  \n                />\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </form>\n    )};\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}